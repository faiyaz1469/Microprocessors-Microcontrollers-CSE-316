
Practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000587  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000050a  00000000  00000000  0000071f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f3  00000000  00000000  00000c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b8  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003b  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
    /* Replace with your application code */
	
  // DDRA = 0b00000000;
   DDRB = 0x00;
  6c:	17 ba       	out	0x17, r1	; 23
   DDRC = 0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
   //unsigned char count =0;
   PORTC = 0x00;
  72:	15 ba       	out	0x15, r1	; 21
   PINB = 0x10;
  74:	80 e1       	ldi	r24, 0x10	; 16
  76:	86 bb       	out	0x16, r24	; 22
   short c = 0;

    while (1) 
    {
		//unsigned char in = PINB;
		if(!(PINB & 1<<7))
  78:	b7 99       	sbic	0x16, 7	; 22
  7a:	fe cf       	rjmp	.-4      	; 0x78 <main+0xc>
		{
			c = PINB & (1<<0);
  7c:	86 b3       	in	r24, 0x16	; 22
  7e:	28 2f       	mov	r18, r24
  80:	21 70       	andi	r18, 0x01	; 1
  82:	30 e0       	ldi	r19, 0x00	; 0
			c += (PINB & (1<<2)) ? 1 : 0;
  84:	86 b3       	in	r24, 0x16	; 22
  86:	82 fb       	bst	r24, 2
  88:	44 27       	eor	r20, r20
  8a:	40 f9       	bld	r20, 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	c9 01       	movw	r24, r18
  90:	84 0f       	add	r24, r20
  92:	95 1f       	adc	r25, r21
			c += (PINB & (1<<4)) ? 1 : 0;
  94:	e6 b3       	in	r30, 0x16	; 22
  96:	e4 fb       	bst	r30, 4
  98:	66 27       	eor	r22, r22
  9a:	60 f9       	bld	r22, 0
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	86 0f       	add	r24, r22
  a0:	97 1f       	adc	r25, r23
			
			PORTC = c & 1;
  a2:	e8 2f       	mov	r30, r24
  a4:	e1 70       	andi	r30, 0x01	; 1
  a6:	e5 bb       	out	0x15, r30	; 21
			if(c>1)
  a8:	02 97       	sbiw	r24, 0x02	; 2
  aa:	34 f3       	brlt	.-52     	; 0x78 <main+0xc>
			{
				PORTC |= (1<<3);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	e2 cf       	rjmp	.-60     	; 0x78 <main+0xc>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
